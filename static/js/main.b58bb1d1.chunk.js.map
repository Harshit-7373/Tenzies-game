{"version":3,"sources":["components/Die.js","components/Scoreboard.js","App.js","index.js"],"names":["Die","props","dieFace","value","react_default","a","createElement","className","isHeld","onClick","holdDice","style","backgroundImage","concat","backgroundSize","Scoreboard","bestRolls","bestTime","App","_React$useState","React","useState","allNewDice","_React$useState2","Object","slicedToArray","dice","setDice","_React$useState3","_React$useState4","tenzies","setTenzies","_React$useState5","_React$useState6","rolls","setRolls","_React$useState7","JSON","parse","localStorage","getItem","_React$useState8","setBestRolls","_React$useState9","_React$useState10","setBestTime","generateNewDie","Math","ceil","random","id","nanoid","newDice","i","push","useEffect","allHeld","every","die","allSameValue","setStart","timeFloored","floor","time","setRecords","setItem","stringify","diceElements","map","key","oldDice","objectSpread","_React$useState11","_React$useState12","setTime","_React$useState13","_React$useState14","start","interval","setInterval","prevTime","clearInterval","react_confetti_min_default","slice","oldRolls","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.b58bb1d1.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Die(props) {\n  // Assign dynamically dieFace according to props\n  let dieFace = \"\";\n  switch (props.value) {\n    case 1:\n      dieFace = \"/img/dieFace1.png\";\n      break;\n    case 2:\n      dieFace = \"/img/dieFace2.png\";\n      break;\n    case 3:\n      dieFace = \"/img/dieFace3.png\";\n      break;\n    case 4:\n      dieFace = \"/img/dieFace4.png\";\n      break;\n    case 5:\n      dieFace = \"/img/dieFace5.png\";\n      break;\n    case 6:\n      dieFace = \"/img/dieFace6.png\";\n      break;\n    default:\n      break;\n  }\n\n  return (\n    // if it's held (isHeld === true), its background color\n    // changes to a light green\n    <div\n      className={props.isHeld ? \"die-face isHeld\" : \"die-face\"}\n      onClick={props.holdDice}\n      style={{\n        backgroundImage: `url(${dieFace})`,\n        backgroundSize: \"cover\",\n      }}\n    >\n      {/* <h2 className=\"die-num\">{props.value}</h2> */}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Scoreboard(props) {\n  return (\n    <div className=\"Scoreboard\">\n      <div className=\"stats-container\">\n        <div className=\"rolls-best\">\n          <p>Best rolls</p>\n          <p className=\"gradient-text\">{props.bestRolls}</p>\n        </div>\n        <div className=\"time-best\">\n          <p>Best time</p>\n          {/* Convert milliseconds in seconds */}\n          <p className=\"gradient-text\">{props.bestTime / 100}s</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Die from \"./components/Die\";\nimport { nanoid } from \"nanoid\";\nimport ReactConfetti from \"react-confetti\";\nimport Scoreboard from \"./components/Scoreboard\";\n\nexport default function App() {\n  // Create state to hold our array of numbers\n  const [dice, setDice] = React.useState(allNewDice());\n\n  // Create state to hold our game state\n  const [tenzies, setTenzies] = React.useState(false);\n\n  // Create and initialize states to hold rolls stats\n  const [rolls, setRolls] = React.useState(0);\n  const [bestRolls, setBestRolls] = React.useState(\n    JSON.parse(localStorage.getItem(\"bestRolls\")) || 0\n  );\n\n  // const [seconds, setSeconds] = React.useState(0);\n  // const [milliSeconds, setMilliSeconds] = React.useState(0);\n  const [bestTime, setBestTime] = React.useState(\n    JSON.parse(localStorage.getItem(\"bestTime\")) || 0\n  );\n\n  // useEffect to sync 2 different states together\n  React.useEffect(() => {\n    // Check all dice are held\n    const allHeld = dice.every((die) => die.isHeld);\n    // Check all dice have same value\n    // Check if every die's value has the same one as the first die in dice array\n    const allSameValue = dice.every((die) => die.value === dice[0].value);\n    if (allHeld && allSameValue) {\n      setTenzies(true);\n      setStart(false);\n\n      setRecords();\n    }\n  }, [dice]);\n\n  function setRecords() {\n    // Check if bestRolls doesn't exist or newest rolls are better than bestRolls if so reassign the variable\n    if (!bestRolls || rolls < bestRolls) {\n      setBestRolls(rolls);\n    }\n\n    // WHY (time / 10) ?\n    const timeFloored = Math.floor(time / 10);\n    // Check if bestTime doesn't exist or newest time is lower than bestTime if so reassign the variable\n    if (!bestTime || timeFloored < bestTime) {\n      setBestTime(timeFloored);\n    }\n  }\n\n  // Set bestRolls to localStorage every item bestRolls changes\n  React.useEffect(() => {\n    localStorage.setItem(\"bestRolls\", JSON.stringify(bestRolls));\n  }, [bestRolls]);\n\n  // Set bestTime to localStorage every item bestTime changes\n  React.useEffect(() => {\n    localStorage.setItem(\"bestTime\", JSON.stringify(bestTime));\n  }, [bestTime]);\n\n  function getRandomInt() {\n    // Math.ceil starts at 1 instead of 0\n    return Math.ceil(Math.random() * 6);\n  }\n\n  function generateNewDie() {\n    return {\n      value: getRandomInt(),\n      isHeld: false,\n      // Use nanoid package to generate a unique key for every object\n      id: nanoid(),\n    };\n  }\n\n  function allNewDice() {\n    // newDice is an array of objects\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateNewDie());\n    }\n    return newDice;\n  }\n\n  // Flip the `isHeld` property on the object in the array\n  // that was clicked, based on the `id` prop passed into the function\n  function holdDice(id) {\n    // Update dice state using old one\n    setDice((oldDice) =>\n      oldDice.map((die) => {\n        // { ...die, isHeld: !die.isHeld } return the same die object but with isHeld flipped\n        return die.id === id ? { ...die, isHeld: !die.isHeld } : die;\n      })\n    );\n  }\n\n  // Map over the state numbers array to generate the array\n  // of Die elements and render those in the App component\n  const diceElements = dice.map((die) => {\n    // Pass holdDice function down to each instance of the Die component\n    // with a callback function with die.id as parameter\n    return (\n      <Die\n        key={die.id}\n        value={die.value}\n        isHeld={die.isHeld}\n        holdDice={() => holdDice(die.id)}\n      />\n    );\n  });\n\n  // Clicking the button should generate a new array of numbers\n  // and set the `dice` state to that new array (thus re-rendering\n  // the array to the page)\n  function rollDice() {\n    if (!tenzies) {\n      // Update dice state using old one\n      setDice((oldDice) =>\n        oldDice.map((die) => {\n          // { ...die, isHeld: !die.isHeld } return the same die object but with isHeld flipped\n          return die.isHeld ? die : generateNewDie();\n        })\n      );\n      updateRolls();\n    } else {\n      // Reset the game if user won and click on button\n      resetGame();\n    }\n  }\n\n  function resetGame() {\n    setTenzies(false);\n    setDice(allNewDice());\n    setRolls(0);\n    setStart(true);\n    setTime(0);\n  }\n\n  // Increase rolls counter updating previous state\n  function updateRolls() {\n    return setRolls((oldRolls) => oldRolls + 1);\n  }\n\n  // ----------------------------TIMER--------------------------------------- //\n\n  const [time, setTime] = React.useState(0);\n  const [start, setStart] = React.useState(true);\n\n  React.useEffect(() => {\n    let interval = null;\n    if (start) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 10);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [start]);\n\n  return (\n    <div className=\"app-container shadow-shorter\">\n      {/* Render Confetti component if `tenzies` is true*/}\n      {tenzies && <ReactConfetti />}\n      <main>\n        <h1 className=\"title\">Tenzies</h1>\n        {!tenzies && (\n          <p className=\"instructions\">\n            Roll until all dice are the same.\n            <br /> Click each die to freeze it at its current value between\n            rolls.\n          </p>\n        )}\n        {tenzies && <p className=\"winner gradient-text\"> YOU WON!</p>}\n\n        <div className=\"stats-container\">\n          <p>Rolls: {rolls}</p>\n          <p>\n            {/* divide the time by 10 because that is the value of a millisecond\n            then modulo 1000. Now we will append this to a zero so that when the time starts\n            there will be a zero already instead of just one digit. \n            Finally we will slice and pass in a parameter of -2 so that when the \n            number becomes two digits the zero will be removed */}\n            Timer: {(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:\n            {(\"0\" + ((time / 10) % 1000)).slice(-2)}\n          </p>\n        </div>\n\n        <div className=\"dice-container\">{diceElements}</div>\n\n        <button className=\"roll-dice\" onClick={rollDice}>\n          {tenzies ? \"New game\" : \"Roll\"}\n        </button>\n\n        <Scoreboard bestRolls={bestRolls} bestTime={bestTime} />\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"../src/style.css\";\n\n// ReactDOM.render is no longer supported in React 18. Use createRoot instead.\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n"],"sourceRoot":""}